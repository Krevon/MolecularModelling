import math, random

# Constants
particlesNumber = 2
sqSideLength = 200
maxStartingSpeed = 10
epsilon = 1.7
sigma = 3
cutOff = 2.5 * sigma
timeStep = 0.0001
steps = 1000000
dimension = 3
digitsAfterComma = 1

# Variables
universe = []  # List of particles x, y, z coordinates
speedList = []
forceList = []
relBoxCoor = []

# NEW STUFF
universeBox = [] # Particles index number located in different boxes [[1, 2, 4], [3],...]
universePart = [] # Particles abs coord located in particle index number [[x, y, z],....]
boxPairs = [] # 13 boxes index number located in the box that will process them
dimensions = 3

#Energy & Potentials
totLJpot = 0.0
totKener = 0.0
totENERGY = 0.0

fileEnergy = open("3D_HarmOsc_LJ_ENERGY.txt", "wt")
file = open("3D_HarmOsc_LJ.xyz", "wt")  # Create or overwrites a file


def main():
    # Determine the size of the box and the number of them with the number of decimal equal to digitsAfterComma variable
    fakeSL = sqSideLength * 10 ** digitsAfterComma
    fakeBS = cutOff * 10 ** digitsAfterComma

    if fakeBS != int(fakeBS):
        fakeBS = int(fakeBS) + 1
        boxNumber = fakeSL / fakeBS
    else:
        boxNumber = fakeSL / fakeBS
    while boxNumber != int(boxNumber):
        fakeBS += 1
        boxNumber = fakeSL / fakeBS
    boxSize = fakeBS / 10 ** digitsAfterComma
    boxNumber = int(boxNumber)

    # Creates x, y, z coord of the 27 cubes relative to the central one
    for x in range(dimensions):
        for y in range(dimensions):
            for z in range(dimensions):
                relBoxCoor.append([x - 1, y - 1, z - 1])

    # Generates lists like [[], [], []...[]] with one variable for each box
    universeGen(universeBox, boxNumber)
    universeGen(boxPairs, boxNumber)

    # Generates the 13 boxes indexes correlated to each box
    for box in range(len(boxPairs)):
        for boxP in range(13):
            boxX, boxY, boxZ = boxUniLocToXYZ(box, boxNumber)
            boxX += relBoxCoor[boxP][0]
            boxY += relBoxCoor[boxP][1]
            boxZ += relBoxCoor[boxP][2]
            closeBoxLoc = boxXYZtoUniLoc(boxX, boxY, boxZ, boxNumber)
            boxPairs[box].append(closeBoxLoc)

    #### GENERATE PARTICLES AND ASSIGN THEM TO BOXES
    particleDisposition()
    ##particleDispositionTEST()
    ##specialParticleDisposition(sigma + 5)

    particleBoxDisposition(boxNumber)

    file.write("%s \n\n" % (particlesNumber + 4))  # First line of xyz file
    vertexGenerator()
    # STEP PROCEDURE: Start
    for step in range(steps):
        print("Step", step)
        file.write("%s \n\n" % (particlesNumber + 8))  # First line of xyz file
        vertexGenerator()

        # STEP PROCEDURE 1: Look in each box and for each particle check the interactions with others in that box
        for box in range(len(universeBox)):
            for p1 in range(len(universeBox[box])):
                p1Index = universeBox[box][p1]
                p1coor = universePart[p1Index]
                for p2 in range(p1, len(universeBox[box])):
                    p2Index = universeBox[box][p2]
                    p2coor = universePart[p2Index]
                    distance, deltaX, xInv, yInv = shortestDistance(p1coor, p2coor)
                    if distance < cutOff:
                        lennardJones(distance, p1Index, p2Index, deltaX, xInv, yInv)

                for pBox in range(len(boxPairs[box])):
                    for p2 in range(len(universeBox[pBox])):
                        p2Index = universeBox[box][p2]
                        p2coor = universePart[p2Index]
                        distance, deltaX, xInv, yInv = shortestDistance(p1coor, p2coor)
                        if distance < cutOff:
                            lennardJones(distance, p1Index, p2Index, deltaX, xInv, yInv)
        # STEP PROCEDURE 2: Speed & new location calculation
        for part in range(len(universe)):
            for dim in range(dimension):
                speedList[part][dim] += forceList[part][dim] * timeStep / 2
            forceList[part] = [0, 0, 0]

            pacmanEffectCOORD(part, universe[part])
            if step % 10 == 0:
                file.write("O       {}      {}      {}\n".format(universe[part][0], universe[part][1], universe[part][2]))

def vertexGenerator():
    # Draws the 8 vertices of the cube
    file.write("Cl       {}      {}      {}\n".format(sqSideLength / 2, sqSideLength / 2, sqSideLength / 2))
    file.write("Cl       {}      {}      {}\n".format(sqSideLength / 2, sqSideLength / 2, - sqSideLength / 2))
    file.write("Cl       {}      {}      {}\n".format(sqSideLength / 2, - sqSideLength / 2, sqSideLength / 2))
    file.write("Cl       {}      {}      {}\n".format(sqSideLength / 2, - sqSideLength / 2, - sqSideLength / 2))
    file.write("Cl       {}      {}      {}\n".format(- sqSideLength / 2, sqSideLength / 2, sqSideLength / 2))
    file.write("Cl       {}      {}      {}\n".format(- sqSideLength / 2, sqSideLength / 2, - sqSideLength / 2))
    file.write("Cl       {}      {}      {}\n".format(- sqSideLength / 2, - sqSideLength / 2, sqSideLength / 2))
    file.write("Cl       {}      {}      {}\n".format(- sqSideLength / 2, - sqSideLength / 2, - sqSideLength / 2))

def universeGen(uniType, boxNumber):
    # Universe = [[], [], [], ......] one for each box
    for boxX in range(boxNumber):
        for boxY in range(boxNumber):
            for boxZ in range(boxNumber):
                uniType.append([])
    return uniType

def boxXYZtoUniLoc(x, y, z, boxNumber):
    uniCoor = z * boxNumber ** 2 + y * boxNumber + x
    return uniCoor

def boxUniLocToXYZ(uniLoc, boxNumber):
    # x, y, z of first box is 0, 0, 0, also first uniLoc should be 0 (since is an index)
    if uniLoc >= boxNumber ** 2:
        z = int(uniLoc / boxNumber ** 2)
        uniLoc -= z * boxNumber ** 2
        if uniLoc >= boxNumber:
            y = int(uniLoc / boxNumber)
            x = uniLoc - y * boxNumber
        else:
            y = 0
            x = uniLoc
    else:
        z = 0
        if uniLoc >= boxNumber:
            y = int(uniLoc / boxNumber)
            x = uniLoc - y * boxNumber
        else:
            y = 0
            x = uniLoc

    return x, y, z

def particleDisposition():
    for particle in range(particlesNumber):  # This will generate x and y coordinates for each and also speed vectors
            particleCoord = []
            particleSpeed = []
            particleForce = []
            for dim in range(dimension):
                particleCoord.append(random.uniform(- sqSideLength / 2, sqSideLength / 2))
                particleSpeed.append(random.uniform(-maxStartingSpeed, maxStartingSpeed))
                particleForce.append(0)
            universe.append(particleCoord)
            speedList.append(particleSpeed)
            forceList.append(particleForce)
            file.write("O       {}      {}      {}\n".format(universe[particle][0], universe[particle][1], universe[particle][2]))

def particleBoxDisposition(boxNumber):
    for part in range(particlesNumber):
        boxX = int((universe[part][0] + sqSideLength / 2) / boxNumber)
        boxY = int((universe[part][1] + sqSideLength / 2) / boxNumber)
        boxZ = int((universe[part][2] + sqSideLength / 2) / boxNumber)
        partBoxLoc = boxXYZtoUniLoc(boxX, boxY, boxZ, boxNumber)
        universeBox[partBoxLoc].append(part)

def specialParticleDisposition(minDist): # Particles are always far enough
    global particlesNumber
    maxAttempt = 10
    particleCoord = []
    particleCoord.append(random.uniform(- sqSideLength / 2, sqSideLength / 2))
    particleCoord.append(random.uniform(- sqSideLength / 2, sqSideLength / 2))
    particleSpeed = []
    particleSpeed.append(random.uniform(-maxStartingSpeed, maxStartingSpeed))
    particleSpeed.append(random.uniform(-maxStartingSpeed, maxStartingSpeed))
    forceList.append([0, 0])
    universe.append(particleCoord)
    speedList.append(particleSpeed)
    file.write("O       {}      {}      0.00000\n".format(universe[0][0], universe[0][1]))

    for particle in range(particlesNumber):  # This will generate x and y coordinates for each and also speed vectors
        if maxAttempt == 0:
            break
        particleCoord = []
        particleCoord.append(random.uniform(- sqSideLength / 2, sqSideLength / 2))
        particleCoord.append(random.uniform(- sqSideLength / 2, sqSideLength / 2))
        universe.append(particleCoord)
        for part in range(len(universe)):
            if shortestDistance(particleCoord, universe[part])[0] < minDist and maxAttempt != 0:
                print("low dist")
                maxAttempt -= 1
                print(maxAttempt)
                del universe[-1]
                break
            elif shortestDistance(particleCoord, universe[part])[0] >= minDist and maxAttempt != 0:
                print("ok dist")
                particleSpeed = []
                particleSpeed.append(random.uniform(-maxStartingSpeed, maxStartingSpeed))
                particleSpeed.append(random.uniform(-maxStartingSpeed, maxStartingSpeed))
                forceList.append([0, 0])
                speedList.append(particleSpeed)
                file.write("O       {}      {}      0.00000\n".format(universe[len(universe)-1][0], universe[len(universe)-1][1]))
                maxAttempt = 10
                break
            elif maxAttempt == 0:
                del universe[-1]
                print("end attempts")
                break
    particlesNumber = len(universe)
    print(len(universe))
    print(len(speedList))

def particleDispositionTEST():
    universe.append([6, 0])
    universe.append([-6, 0])
    universe.append([8, 4])
    universe.append([-4, 4])
    speedList.append([0, 3])
    speedList.append([0, 3])
    speedList.append([0, 0])
    speedList.append([0, 0])
    forceList.append([0, 0])
    forceList.append([0, 0])
    forceList.append([0, 0])
    forceList.append([0, 0])
    file.write("O       {}      {}      {}\n".format(universe[0][0], universe[0][1]), universe[0][2])
    file.write("O       {}      {}      0.00000\n".format(universe[1][0], universe[1][1]))
    file.write("O       {}      {}      0.00000\n".format(universe[2][0], universe[2][1]))
    file.write("O       {}      {}      0.00000\n".format(universe[3][0], universe[3][1]))

def shortestDistance(p1, p2): #Defines which is the shortest distance for the particles
    relp2 = []
    relDeltaX = [abs(p1[0] - p2[0])]
    if p1[0] >= 0 and p1[1] >= 0: #p1 in first quadrant
        relp2.append(math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2))
        relp2.append(math.sqrt((p1[0] - (p2[0] + sqSideLength)) ** 2 + (p1[1] - p2[1]) ** 2))
        relp2.append(math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - (p2[1] + sqSideLength)) ** 2))
        relp2.append(math.sqrt((p1[0] - (p2[0] + sqSideLength)) ** 2 + (p1[1] - (p2[1] + sqSideLength)) ** 2))
        relDeltaX.append(abs(p1[0] - (p2[0] + sqSideLength)))
    elif p1[0] < 0 and p1[1] >= 0: #p1 in second quadrant
        relp2.append(math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2))
        relp2.append(math.sqrt((p1[0] - (p2[0] - sqSideLength)) ** 2 + (p1[1] - p2[1]) ** 2))
        relp2.append(math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - (p2[1] + sqSideLength)) ** 2))
        relp2.append(math.sqrt((p1[0] - (p2[0] - sqSideLength)) ** 2 + (p1[1] - (p2[1] + sqSideLength)) ** 2))
        relDeltaX.append(abs(p1[0] - (p2[0] - sqSideLength)))
    elif p1[0] < 0 and p1[1] < 0: #p1 in third quadrant
        relp2.append(math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2))
        relp2.append(math.sqrt((p1[0] - (p2[0] - sqSideLength)) ** 2 + (p1[1] - p2[1]) ** 2))
        relp2.append(math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - (p2[1] - sqSideLength)) ** 2))
        relp2.append(math.sqrt((p1[0] - (p2[0] - sqSideLength)) ** 2 + (p1[1] - (p2[1] - sqSideLength)) ** 2))
        relDeltaX.append(abs(p1[0] - (p2[0] - sqSideLength)))
    elif p1[0] >= 0 and p1[1] < 0: #p1 in fourth quadrant
        relp2.append(math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2))
        relp2.append(math.sqrt((p1[0] - (p2[0] + sqSideLength)) ** 2 + (p1[1] - p2[1]) ** 2))
        relp2.append(math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - (p2[1] - sqSideLength)) ** 2))
        relp2.append(math.sqrt((p1[0] - (p2[0] + sqSideLength)) ** 2 + (p1[1] - (p2[1] - sqSideLength)) ** 2))
        relDeltaX.append(abs(p1[0] - (p2[0] + sqSideLength)))
    shortest = min(relp2)
    realDeltaX = min(relDeltaX)

    for poss in range(len(relp2)):
        if shortest == relp2[poss]:
            case = poss
    if case == 0:
        xInvFact = 1
        yInvFact = 1
    elif case == 1:
        xInvFact = -1
        yInvFact = 1
    elif case == 2:
        xInvFact = 1
        yInvFact = -1
    elif case == 3:
        xInvFact = -1
        yInvFact = -1

    return shortest, realDeltaX, xInvFact, yInvFact

def pacmanEffectCOORD(p1, p1Coor):
    for dim in range(len(p1Coor)):
        p1Coor[dim] += speedList[p1][dim] * timeStep
        if p1Coor[dim] > sqSideLength / 2:
            p1Coor[dim] -= sqSideLength
        elif p1Coor[dim] < - sqSideLength / 2:
            p1Coor[dim] += sqSideLength

def TESTPrint(p1, p2, Ftot, angle, distance, speedListp1):
    print(p1, p2)
    print("Total LJ Force =", Ftot)
    print("angle       =", angle)
    print("Distance    =", distance)
    print("Speed x & y =", speedListp1)

def angleGen(p1, p2, distance, deltaX):
    if universe[p1][0] <= universe[p2][0] and universe[p1][1] <= universe[p2][1]:  # p2 is in first quadrant
        angle = math.acos(deltaX / distance)
    elif universe[p1][0] > universe[p2][0] and universe[p1][1] <= universe[p2][1]:  # p2 is in second quadrant
        angle = math.pi - math.acos(deltaX / distance)
    elif universe[p1][0] > universe[p2][0] and universe[p1][1] > universe[p2][1]:  # p2 is in third quadrant
        angle = math.pi + math.acos(deltaX / distance)
    elif universe[p1][0] <= universe[p2][0] and universe[p1][1] > universe[p2][1]:  # p2 is in fourth quadrant
        angle = 2 * math.pi - math.acos(deltaX / distance)
    return angle

def lennardJones(distance, p1, p2, deltaX, xInv, yInv):
    Ftot = - 24 * epsilon * (sigma ** 6) / (distance ** 7) + 48 * epsilon * (sigma ** 12) / (distance ** 13)
    angle = angleGen(p1, p2, distance, deltaX)

    Fx = Ftot * math.cos(angle) * xInv
    Fy = Ftot * math.sin(angle) * yInv
    forceList[p1][0] += - Fx
    forceList[p1][1] += - Fy
    forceList[p2][0] += Fx
    forceList[p2][1] += Fy

def stepProcedure(universe, speedList, forceList): # OLD
    for step in range(steps):
        print("Step", step)
        totENERGY = 0
        totLJpot = 0
        totKener = 0
        file.write("%s \n\n" % (particlesNumber + 4))  # First line of xyz file
        vertexGenerator()

        for p1 in range(len(universe)):
            for p2 in range(p1 + 1, particlesNumber):
                print(universe)
                distance, deltaX, xInv, yInv = shortestDistance(universe[p1], universe[p2])  # math.sqrt((universe[p1][0] - universe[p2][0]) ** 2 + (universe[p1][1] - universe[p2][1]) ** 2)

                if distance < cutOff:
                    Ftot = - 24 * epsilon * (sigma ** 6) / (distance ** 7) + 48 * epsilon * (sigma ** 12) / (
                            distance ** 13)

                    angle = angleGen(p1, p2, distance, deltaX)

                    Fx = Ftot * math.cos(angle) * xInv
                    Fy = Ftot * math.sin(angle) * yInv
                    forceList[p1][0] += - Fx
                    forceList[p1][1] += - Fy
                    forceList[p2][0] += Fx
                    forceList[p2][1] += Fy

                    potE_LJ = 4 * epsilon * ((sigma / distance) ** 12 - (sigma / distance) ** 6)
                    totLJpot += potE_LJ * 2  # Both particles have but only one is calculated

                    TESTPrint(p1, p2, Ftot, angle, distance, speedList[p1])

            speedList[p1][0] += forceList[p1][0] * timeStep / 2
            speedList[p1][1] += forceList[p1][1] * timeStep / 2
            forceList[p1] = [0, 0]

            partSpeed = math.sqrt(speedList[p1][0] ** 2 + speedList[p1][1] ** 2)
            kinE = 0.5 * partSpeed ** 2
            totKener += kinE

            pacmanEffectCOORD(p1, universe[p1])
            if step % 10 == 0:
                file.write("O       {}      {}      {}\n".format(universe[p1][0], universe[p1][1], universe[p1][2]))

        totENERGY = totLJpot + totKener
        fileEnergy.write("{}       {}      {}\n".format(totENERGY, totKener, totLJpot))

if __name__ == '__main__':
    main()
