import math, random, copy, time

### AUTHOR: David Sebastian Casadio

# Constants
particlesNumber = 125
sqSideLength = 20
maxStartingSpeed = 1
epsilon = 1
sigma = 1
cutOff = 2.5 * sigma
timeStep = 0.0001
steps = 10000
digitsAfterComma = 0
dimensions = 3
boxNumber = 4

# Variables
universe = []  # Particles abs coord located in particle index number [[x, y, z],....]
speedList = []
forceList = []
timeStart = 0
timeStop = []

# Energy & Potentials
totLJpot = 0.0
totKener = 0.0
totENERGY = 0.0

fileTime = open("Classic_Cell_LJ_TIME{}.txt".format(particlesNumber), "wt")
file = open("Classic_Cell_LJ.xyz", "wt")  # Create or overwrites a file

def main():
    # Starts to write the file
    file.write("%s \n\n" % (particlesNumber + 8))  # First line of xyz file
    vertexGenerator()

    # Generates particles and assign them to boxes
    ##particleDisposition()
    ##particleDispositionTEST()
    specialParticleDisposition(sigma * 1.5, particlesNumber)

    assert len(universe) == particlesNumber

    # STEP PROCEDURE: Start
    timeStart = time.time()
    for step in range(steps):

        print("Step", step)

        # STEP PROCEDURE 1: Verlet step 1 & 2 speed in half timestep and position in full timestep
        for part in range(len(universe)):
            for dim in range(dimensions):
                speedList[part][dim] += forceList[part][dim] * timeStep / 2
            forceList[part] = [0, 0, 0]
            pacmanEffectCOORD(part, universe[part])

        # STEP PROCEDURE 2: For each particle check the interactions with others
        for p1 in range(particlesNumber):
            for p2 in range(p1 + 1, particlesNumber):
                distance, rX, rY, rZ = shortestDistance(universe[p1], universe[p2])
                if distance < cutOff:
                    lennardJones(distance, p1, p2, rX, rY, rZ)

        # STEP PROCEDURE 3: Speed update and write file
        if step % 10 == 0:
            file.write("%s \n\n" % (particlesNumber + 8))  # First line of xyz file
            vertexGenerator()

        for part in range(len(universe)):
            for dim in range(dimensions):
                speedList[part][dim] += forceList[part][dim] * timeStep / 2
            if step % 10 == 0:
                file.write("O       {}      {}      {}\n".format(universe[part][0], universe[part][1], universe[part][2]))

        timeStop.append(time.time())

    # POST SIMULATION: building the time chart
    for step in range(len(timeStop)):
        t = round(timeStop[step] - timeStart, 7)
        fileTime.write("{}      {}\n".format(step + 1, t))
    print(timeStop)


def vertexGenerator():
    # Draws the 8 vertices of the cube
    file.write("Cl       {}      {}      {}\n".format(sqSideLength / 2, sqSideLength / 2, sqSideLength / 2))
    file.write("Cl       {}      {}      {}\n".format(sqSideLength / 2, sqSideLength / 2, - sqSideLength / 2))
    file.write("Cl       {}      {}      {}\n".format(sqSideLength / 2, - sqSideLength / 2, sqSideLength / 2))
    file.write("Cl       {}      {}      {}\n".format(sqSideLength / 2, - sqSideLength / 2, - sqSideLength / 2))
    file.write("Cl       {}      {}      {}\n".format(- sqSideLength / 2, sqSideLength / 2, sqSideLength / 2))
    file.write("Cl       {}      {}      {}\n".format(- sqSideLength / 2, sqSideLength / 2, - sqSideLength / 2))
    file.write("Cl       {}      {}      {}\n".format(- sqSideLength / 2, - sqSideLength / 2, sqSideLength / 2))
    file.write("Cl       {}      {}      {}\n".format(- sqSideLength / 2, - sqSideLength / 2, - sqSideLength / 2))

def particleDisposition():
    for particle in range(particlesNumber):  # This will generate x and y coordinates for each and also speed vectors
        particleCoord = []
        particleSpeed = []
        particleForce = []
        for dim in range(dimensions):
            particleCoord.append(random.uniform(- sqSideLength / 2, sqSideLength / 2))
            particleSpeed.append(random.uniform(-maxStartingSpeed, maxStartingSpeed))
            particleForce.append(0)
        universe.append(particleCoord)
        speedList.append(particleSpeed)
        forceList.append(particleForce)
        file.write(
            "O       {}      {}      {}\n".format(universe[particle][0], universe[particle][1], universe[particle][2]))

def specialParticleDisposition(minDist, particlesNumber):  # Particles are always far enough

    maxAttempt = 10
    particleCoord = []
    particleSpeed = []
    particleForce = []
    for dim in range(dimensions):
        particleCoord.append(random.uniform(- sqSideLength / 2, sqSideLength / 2))
        particleSpeed.append(random.uniform(-maxStartingSpeed, maxStartingSpeed))
        particleForce.append(0)
    universe.append(particleCoord)
    speedList.append(particleSpeed)
    forceList.append(particleForce)
    file.write("O       {}      {}      {}\n".format(universe[0][0], universe[0][1], universe[0][2]))

    while len(universe) < particlesNumber:  # This will generate x and y coordinates for each and also speed vectors
        if maxAttempt == 0:
            break
        particleCoord = []
        for dim in range(dimensions):
            particleCoord.append(random.uniform(- sqSideLength / 2, sqSideLength / 2))
        universe.append(particleCoord)

        print(len(universe) - 1)
        for part in range(0, len(universe) - 1):
            if shortestDistance(particleCoord, universe[part])[0] < minDist and maxAttempt != 0:
                maxAttempt -= 1
                del universe[-1]
                break
            elif shortestDistance(particleCoord, universe[part])[0] >= minDist and maxAttempt != 0:
                maxAttempt = 10
            elif maxAttempt == 0:
                del universe[-1]
                break
        if maxAttempt == 10:
            particleSpeed = []
            particleForce = []
            for dim in range(dimensions):
                particleSpeed.append(random.uniform(-maxStartingSpeed, maxStartingSpeed))
                particleForce.append(0)
            speedList.append(particleSpeed)
            forceList.append(particleForce)
            file.write("O       {}      {}      {}\n".format(universe[-1][0], universe[-1][1], universe[-1][2]))
    particlesNumber = len(universe)
    print(len(universe))
    print(len(speedList))


def particleDispositionTEST():
    global particlesNumber
    particlesNumber = 2
    universe.append([-5, 0, 0])
    universe.append([-6.4, 0, 0])
    speedList.append([0, 0, 0])
    speedList.append([0, 0, 0])
    forceList.append([0, 0, 0])
    forceList.append([0, 0, 0])
    file.write("O       {}      {}      {}\n".format(universe[0][0], universe[0][1], universe[0][2]))
    file.write("O       {}      {}      {}\n".format(universe[1][0], universe[1][1], universe[1][2]))

def shortestDistance(p1, p2):

    relp2 = [] #List of all the possible distances between p1 and p2
    relDeltaX = [abs(p1[0] - p2[0])] #Parameter needed for the calculation of angle between p1 and p2
    relDeltaY = [abs(p1[1] - p2[1])]
    relDeltaZ = [abs(p1[2] - p2[2])]

    if p1[0] >= 0 and p1[1] >= 0 and p1[2] >= 0: #p1 ALL POSITIVE
        relp2.append(math.sqrt(                 (p1[0] - p2[0]) ** 2 +                  (p1[1] - p2[1]) ** 2 +                  (p1[2] - p2[2]) ** 2)) #  x  y  z
        relp2.append(math.sqrt((p1[0] - (p2[0] + sqSideLength)) ** 2 +                  (p1[1] - p2[1]) ** 2 +                  (p1[2] - p2[2]) ** 2)) # -x  y  z
        relp2.append(math.sqrt(                 (p1[0] - p2[0]) ** 2 + (p1[1] - (p2[1] + sqSideLength)) ** 2 +                  (p1[2] - p2[2]) ** 2)) #  x -y  z
        relp2.append(math.sqrt((p1[0] - (p2[0] + sqSideLength)) ** 2 + (p1[1] - (p2[1] + sqSideLength)) ** 2 +                  (p1[2] - p2[2]) ** 2)) # -x -y  z

        relp2.append(math.sqrt((p1[0] - (p2[0] + sqSideLength)) ** 2 + (p1[1] - (p2[1] + sqSideLength)) ** 2 + (p1[2] - (p2[2] + sqSideLength)) ** 2)) # -x -y -z
        relp2.append(math.sqrt(                 (p1[0] - p2[0]) ** 2 +                  (p1[1] - p2[1]) ** 2 + (p1[2] - (p2[2] + sqSideLength)) ** 2)) #  x  y -z
        relp2.append(math.sqrt(                 (p1[0] - p2[0]) ** 2 + (p1[1] - (p2[1] + sqSideLength)) ** 2 + (p1[2] - (p2[2] + sqSideLength)) ** 2)) #  x -y -z
        relp2.append(math.sqrt((p1[0] - (p2[0] + sqSideLength)) ** 2 +                  (p1[1] - p2[1]) ** 2 + (p1[2] - (p2[2] + sqSideLength)) ** 2)) # -x  y -z

        relDeltaX.append(abs(p1[0] - (p2[0] + sqSideLength)))
        relDeltaY.append(abs(p1[0] - (p2[0] + sqSideLength)))
        relDeltaZ.append(abs(p1[0] - (p2[0] + sqSideLength)))

    elif p1[0] < 0 and p1[1] >= 0 and p1[2] >= 0: #p1 X negative
        relp2.append(math.sqrt(                 (p1[0] - p2[0]) ** 2 +                  (p1[1] - p2[1]) ** 2 +                  (p1[2] - p2[2]) ** 2)) #  x  y  z
        relp2.append(math.sqrt((p1[0] - (p2[0] - sqSideLength)) ** 2 +                  (p1[1] - p2[1]) ** 2 +                  (p1[2] - p2[2]) ** 2)) # -x  y  z
        relp2.append(math.sqrt(                 (p1[0] - p2[0]) ** 2 + (p1[1] - (p2[1] + sqSideLength)) ** 2 +                  (p1[2] - p2[2]) ** 2)) #  x -y  z
        relp2.append(math.sqrt((p1[0] - (p2[0] - sqSideLength)) ** 2 + (p1[1] - (p2[1] + sqSideLength)) ** 2 +                  (p1[2] - p2[2]) ** 2)) # -x -y  z

        relp2.append(math.sqrt((p1[0] - (p2[0] - sqSideLength)) ** 2 + (p1[1] - (p2[1] + sqSideLength)) ** 2 + (p1[2] - (p2[2] + sqSideLength)) ** 2)) # -x -y -z
        relp2.append(math.sqrt(                 (p1[0] - p2[0]) ** 2 +                  (p1[1] - p2[1]) ** 2 + (p1[2] - (p2[2] + sqSideLength)) ** 2)) #  x  y -z
        relp2.append(math.sqrt(                 (p1[0] - p2[0]) ** 2 + (p1[1] - (p2[1] + sqSideLength)) ** 2 + (p1[2] - (p2[2] + sqSideLength)) ** 2)) #  x -y -z
        relp2.append(math.sqrt((p1[0] - (p2[0] - sqSideLength)) ** 2 +                  (p1[1] - p2[1]) ** 2 + (p1[2] - (p2[2] + sqSideLength)) ** 2)) # -x  y -z

        relDeltaX.append(abs(p1[0] - (p2[0] - sqSideLength)))
        relDeltaY.append(abs(p1[0] - (p2[0] + sqSideLength)))
        relDeltaZ.append(abs(p1[0] - (p2[0] + sqSideLength)))

    elif p1[0] < 0 and p1[1] < 0 and p1[2] >= 0: #p1 X Y NEGATIVE
        relp2.append(math.sqrt(                 (p1[0] - p2[0]) ** 2 +                  (p1[1] - p2[1]) ** 2 +                  (p1[2] - p2[2]) ** 2)) #  x  y  z
        relp2.append(math.sqrt((p1[0] - (p2[0] - sqSideLength)) ** 2 +                  (p1[1] - p2[1]) ** 2 +                  (p1[2] - p2[2]) ** 2)) # -x  y  z
        relp2.append(math.sqrt(                 (p1[0] - p2[0]) ** 2 + (p1[1] - (p2[1] - sqSideLength)) ** 2 +                  (p1[2] - p2[2]) ** 2)) #  x -y  z
        relp2.append(math.sqrt((p1[0] - (p2[0] - sqSideLength)) ** 2 + (p1[1] - (p2[1] - sqSideLength)) ** 2 +                  (p1[2] - p2[2]) ** 2)) # -x -y  z

        relp2.append(math.sqrt((p1[0] - (p2[0] - sqSideLength)) ** 2 + (p1[1] - (p2[1] - sqSideLength)) ** 2 + (p1[2] - (p2[2] + sqSideLength)) ** 2)) # -x -y -z
        relp2.append(math.sqrt(                 (p1[0] - p2[0]) ** 2 +                  (p1[1] - p2[1]) ** 2 + (p1[2] - (p2[2] + sqSideLength)) ** 2)) #  x  y -z
        relp2.append(math.sqrt(                 (p1[0] - p2[0]) ** 2 + (p1[1] - (p2[1] - sqSideLength)) ** 2 + (p1[2] - (p2[2] + sqSideLength)) ** 2)) #  x -y -z
        relp2.append(math.sqrt((p1[0] - (p2[0] - sqSideLength)) ** 2 +                  (p1[1] - p2[1]) ** 2 + (p1[2] - (p2[2] + sqSideLength)) ** 2)) # -x  y -z

        relDeltaX.append(abs(p1[0] - (p2[0] - sqSideLength)))
        relDeltaY.append(abs(p1[0] - (p2[0] - sqSideLength)))
        relDeltaZ.append(abs(p1[0] - (p2[0] + sqSideLength)))

    elif p1[0] >= 0 and p1[1] < 0 and p1[2] >= 0: #p1 Y NEGATIVE
        relp2.append(math.sqrt(                 (p1[0] - p2[0]) ** 2 +                  (p1[1] - p2[1]) ** 2 +                  (p1[2] - p2[2]) ** 2)) #  x  y  z
        relp2.append(math.sqrt((p1[0] - (p2[0] + sqSideLength)) ** 2 +                  (p1[1] - p2[1]) ** 2 +                  (p1[2] - p2[2]) ** 2)) # -x  y  z
        relp2.append(math.sqrt(                 (p1[0] - p2[0]) ** 2 + (p1[1] - (p2[1] - sqSideLength)) ** 2 +                  (p1[2] - p2[2]) ** 2)) #  x -y  z
        relp2.append(math.sqrt((p1[0] - (p2[0] + sqSideLength)) ** 2 + (p1[1] - (p2[1] - sqSideLength)) ** 2 +                  (p1[2] - p2[2]) ** 2)) # -x -y  z

        relp2.append(math.sqrt((p1[0] - (p2[0] + sqSideLength)) ** 2 + (p1[1] - (p2[1] - sqSideLength)) ** 2 + (p1[2] - (p2[2] + sqSideLength)) ** 2)) # -x -y -z
        relp2.append(math.sqrt(                 (p1[0] - p2[0]) ** 2 +                  (p1[1] - p2[1]) ** 2 + (p1[2] - (p2[2] + sqSideLength)) ** 2)) #  x  y -z
        relp2.append(math.sqrt(                 (p1[0] - p2[0]) ** 2 + (p1[1] - (p2[1] - sqSideLength)) ** 2 + (p1[2] - (p2[2] + sqSideLength)) ** 2)) #  x -y -z
        relp2.append(math.sqrt((p1[0] - (p2[0] + sqSideLength)) ** 2 +                  (p1[1] - p2[1]) ** 2 + (p1[2] - (p2[2] + sqSideLength)) ** 2)) # -x  y -z

        relDeltaX.append(abs(p1[0] - (p2[0] + sqSideLength)))
        relDeltaY.append(abs(p1[0] - (p2[0] - sqSideLength)))
        relDeltaZ.append(abs(p1[0] - (p2[0] + sqSideLength)))

    elif p1[0] < 0 and p1[1] < 0 and p1[2] < 0: #p1 ALL NEGATIVE
        relp2.append(math.sqrt(                 (p1[0] - p2[0]) ** 2 +                  (p1[1] - p2[1]) ** 2 +                  (p1[2] - p2[2]) ** 2)) #  x  y  z
        relp2.append(math.sqrt((p1[0] - (p2[0] - sqSideLength)) ** 2 +                  (p1[1] - p2[1]) ** 2 +                  (p1[2] - p2[2]) ** 2)) # -x  y  z
        relp2.append(math.sqrt(                 (p1[0] - p2[0]) ** 2 + (p1[1] - (p2[1] - sqSideLength)) ** 2 +                  (p1[2] - p2[2]) ** 2)) #  x -y  z
        relp2.append(math.sqrt((p1[0] - (p2[0] - sqSideLength)) ** 2 + (p1[1] - (p2[1] - sqSideLength)) ** 2 +                  (p1[2] - p2[2]) ** 2)) # -x -y  z

        relp2.append(math.sqrt((p1[0] - (p2[0] - sqSideLength)) ** 2 + (p1[1] - (p2[1] - sqSideLength)) ** 2 + (p1[2] - (p2[2] - sqSideLength)) ** 2)) # -x -y -z
        relp2.append(math.sqrt(                 (p1[0] - p2[0]) ** 2 +                  (p1[1] - p2[1]) ** 2 + (p1[2] - (p2[2] - sqSideLength)) ** 2)) #  x  y -z
        relp2.append(math.sqrt(                 (p1[0] - p2[0]) ** 2 + (p1[1] - (p2[1] - sqSideLength)) ** 2 + (p1[2] - (p2[2] - sqSideLength)) ** 2)) #  x -y -z
        relp2.append(math.sqrt((p1[0] - (p2[0] - sqSideLength)) ** 2 +                  (p1[1] - p2[1]) ** 2 + (p1[2] - (p2[2] - sqSideLength)) ** 2)) # -x  y -z

        relDeltaX.append(abs(p1[0] - (p2[0] - sqSideLength)))
        relDeltaY.append(abs(p1[0] - (p2[0] - sqSideLength)))
        relDeltaZ.append(abs(p1[0] - (p2[0] - sqSideLength)))

    elif p1[0] < 0 and p1[1] >= 0 and p1[2] < 0: #p1 X Z NEGATIVE
        relp2.append(math.sqrt(                 (p1[0] - p2[0]) ** 2 +                  (p1[1] - p2[1]) ** 2 +                  (p1[2] - p2[2]) ** 2)) #  x  y  z
        relp2.append(math.sqrt((p1[0] - (p2[0] - sqSideLength)) ** 2 +                  (p1[1] - p2[1]) ** 2 +                  (p1[2] - p2[2]) ** 2)) # -x  y  z
        relp2.append(math.sqrt(                 (p1[0] - p2[0]) ** 2 + (p1[1] - (p2[1] + sqSideLength)) ** 2 +                  (p1[2] - p2[2]) ** 2)) #  x -y  z
        relp2.append(math.sqrt((p1[0] - (p2[0] - sqSideLength)) ** 2 + (p1[1] - (p2[1] + sqSideLength)) ** 2 +                  (p1[2] - p2[2]) ** 2)) # -x -y  z

        relp2.append(math.sqrt((p1[0] - (p2[0] - sqSideLength)) ** 2 + (p1[1] - (p2[1] + sqSideLength)) ** 2 + (p1[2] - (p2[2] - sqSideLength)) ** 2)) # -x -y -z
        relp2.append(math.sqrt(                 (p1[0] - p2[0]) ** 2 +                  (p1[1] - p2[1]) ** 2 + (p1[2] - (p2[2] - sqSideLength)) ** 2)) #  x  y -z
        relp2.append(math.sqrt(                 (p1[0] - p2[0]) ** 2 + (p1[1] - (p2[1] + sqSideLength)) ** 2 + (p1[2] - (p2[2] - sqSideLength)) ** 2)) #  x -y -z
        relp2.append(math.sqrt((p1[0] - (p2[0] - sqSideLength)) ** 2 +                  (p1[1] - p2[1]) ** 2 + (p1[2] - (p2[2] - sqSideLength)) ** 2)) # -x  y -z

        relDeltaX.append(abs(p1[0] - (p2[0] - sqSideLength)))
        relDeltaY.append(abs(p1[0] - (p2[0] + sqSideLength)))
        relDeltaZ.append(abs(p1[0] - (p2[0] - sqSideLength)))

    elif p1[0] >= 0 and p1[1] < 0 and p1[2] < 0: #p1 Y Z NEGATIVE
        relp2.append(math.sqrt(                 (p1[0] - p2[0]) ** 2 +                  (p1[1] - p2[1]) ** 2 +                  (p1[2] - p2[2]) ** 2)) #  x  y  z
        relp2.append(math.sqrt((p1[0] - (p2[0] + sqSideLength)) ** 2 +                  (p1[1] - p2[1]) ** 2 +                  (p1[2] - p2[2]) ** 2)) # -x  y  z
        relp2.append(math.sqrt(                 (p1[0] - p2[0]) ** 2 + (p1[1] - (p2[1] - sqSideLength)) ** 2 +                  (p1[2] - p2[2]) ** 2)) #  x -y  z
        relp2.append(math.sqrt((p1[0] - (p2[0] + sqSideLength)) ** 2 + (p1[1] - (p2[1] - sqSideLength)) ** 2 +                  (p1[2] - p2[2]) ** 2)) # -x -y  z

        relp2.append(math.sqrt((p1[0] - (p2[0] + sqSideLength)) ** 2 + (p1[1] - (p2[1] - sqSideLength)) ** 2 + (p1[2] - (p2[2] - sqSideLength)) ** 2)) # -x -y -z
        relp2.append(math.sqrt(                 (p1[0] - p2[0]) ** 2 +                  (p1[1] - p2[1]) ** 2 + (p1[2] - (p2[2] - sqSideLength)) ** 2)) #  x  y -z
        relp2.append(math.sqrt(                 (p1[0] - p2[0]) ** 2 + (p1[1] - (p2[1] - sqSideLength)) ** 2 + (p1[2] - (p2[2] - sqSideLength)) ** 2)) #  x -y -z
        relp2.append(math.sqrt((p1[0] - (p2[0] + sqSideLength)) ** 2 +                  (p1[1] - p2[1]) ** 2 + (p1[2] - (p2[2] - sqSideLength)) ** 2)) # -x  y -z

        relDeltaX.append(abs(p1[0] - (p2[0] + sqSideLength)))
        relDeltaY.append(abs(p1[0] - (p2[0] - sqSideLength)))
        relDeltaZ.append(abs(p1[0] - (p2[0] - sqSideLength)))

    elif p1[0] >= 0 and p1[1] >= 0 and p1[2] < 0: #p1 Z NEGATIVE
        relp2.append(math.sqrt(                 (p1[0] - p2[0]) ** 2 +                  (p1[1] - p2[1]) ** 2 +                  (p1[2] - p2[2]) ** 2)) #  x  y  z
        relp2.append(math.sqrt((p1[0] - (p2[0] + sqSideLength)) ** 2 +                  (p1[1] - p2[1]) ** 2 +                  (p1[2] - p2[2]) ** 2)) # -x  y  z
        relp2.append(math.sqrt(                 (p1[0] - p2[0]) ** 2 + (p1[1] - (p2[1] + sqSideLength)) ** 2 +                  (p1[2] - p2[2]) ** 2)) #  x -y  z
        relp2.append(math.sqrt((p1[0] - (p2[0] + sqSideLength)) ** 2 + (p1[1] - (p2[1] + sqSideLength)) ** 2 +                  (p1[2] - p2[2]) ** 2)) # -x -y  z

        relp2.append(math.sqrt((p1[0] - (p2[0] + sqSideLength)) ** 2 + (p1[1] - (p2[1] + sqSideLength)) ** 2 + (p1[2] - (p2[2] - sqSideLength)) ** 2)) # -x -y -z
        relp2.append(math.sqrt(                 (p1[0] - p2[0]) ** 2 +                  (p1[1] - p2[1]) ** 2 + (p1[2] - (p2[2] - sqSideLength)) ** 2)) #  x  y -z
        relp2.append(math.sqrt(                 (p1[0] - p2[0]) ** 2 + (p1[1] - (p2[1] + sqSideLength)) ** 2 + (p1[2] - (p2[2] - sqSideLength)) ** 2)) #  x -y -z
        relp2.append(math.sqrt((p1[0] - (p2[0] + sqSideLength)) ** 2 +                  (p1[1] - p2[1]) ** 2 + (p1[2] - (p2[2] - sqSideLength)) ** 2)) # -x  y -z

        relDeltaX.append(abs(p1[0] - (p2[0] + sqSideLength)))
        relDeltaY.append(abs(p1[0] - (p2[0] + sqSideLength)))
        relDeltaZ.append(abs(p1[0] - (p2[0] - sqSideLength)))

    shortest = min(relp2)  #Select the lowest distance
    realDeltaX = min(relDeltaX) #same here
    realDeltaY = min(relDeltaY)
    realDeltaZ = min(relDeltaZ)

    if shortest == 0:
        ratioXtD = ratioYtD = ratioZtD = 0
    else:
        ratioXtD = abs(realDeltaX) / shortest
        ratioYtD = abs(realDeltaY) / shortest
        ratioZtD = abs(realDeltaZ) / shortest

    return shortest, ratioXtD, ratioYtD, ratioZtD

def pacmanEffectCOORD(p1, p1Coor):
    for dim in range(len(p1Coor)):
        p1Coor[dim] += speedList[p1][dim] * timeStep
        if p1Coor[dim] >= sqSideLength / 2:
            mult = int((p1Coor[dim] + (sqSideLength / 2)) / sqSideLength)
            p1Coor[dim] -= sqSideLength * mult
        elif p1Coor[dim] <= - sqSideLength / 2:
            mult = int((p1Coor[dim] - (sqSideLength / 2)) / sqSideLength)
            p1Coor[dim] -= sqSideLength * mult

def TESTPrint(p1, p2, Ftot, distance):
    print(p1, p2)
    print("Total LJ Force =", Ftot)
    print("Distance       =", distance)
    print("P1:", universe[p1], " P2:", universe[p2])
    print("P1 Speed x & y =", speedList[p1][0], " ", speedList[p1][1])
    print("P2 Speed x & y =", speedList[p2][0], " ", speedList[p2][1])

def lennardJones(distance, p1, p2, rX, rY, rZ):
    if distance == 0:
        Ftot = 0
    else:
        Ftot = - 24 * epsilon * (sigma ** 6) / (distance ** 7) + 48 * epsilon * (sigma ** 12) / (distance ** 13)
    if Ftot >= 100:
        TESTPrint(p1, p2, Ftot, distance)
    forceXYZ = [Ftot * rX, Ftot * rY, Ftot * rZ]

    for dim in range(dimensions):
        if universe[p1][dim] < universe[p2][dim]:
            forceList[p1][dim] += - forceXYZ[dim]
            forceList[p2][dim] += + forceXYZ[dim]
        else:
            forceList[p1][dim] += + forceXYZ[dim]
            forceList[p2][dim] += - forceXYZ[dim]


if __name__ == '__main__':
    main()
