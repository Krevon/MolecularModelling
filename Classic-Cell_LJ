import math, random, copy, time

# Constants
particlesNumber = 400
sqSideLength = 20
maxStartingSpeed = 10
epsilon = 1
sigma = 1
cutOff = 2.5 * sigma
timeStep = 0.00001
steps = 10000
digitsAfterComma = 0
dimensions = 3
boxNumber = 4

# Variables
universe = []  # Particles abs coord located in particle index number [[x, y, z],....]
speedList = []
forceList = []
timeStart = 0
timeStop = []

# Energy & Potentials
totLJpot = 0.0
totKener = 0.0
totENERGY = 0.0

fileTime = open("Classic_Cell_LJ_TIME.txt", "wt")
file = open("Classic_Cell_LJ.xyz", "wt")  # Create or overwrites a file


def main(boxNumber):
    # Starts to write the file
    file.write("%s \n\n" % (particlesNumber + 8))  # First line of xyz file
    vertexGenerator()

    # Generates particles and assign them to boxes
    ##particleDisposition()
    ##particleDispositionTEST()
    specialParticleDisposition(sigma * 1.5, particlesNumber, boxSize)

    assert len(universe) == particlesNumber

    # STEP PROCEDURE: Start
    timeStart = time.time()
    for step in range(steps):

        print("Step", step)

        # STEP PROCEDURE 1: Verlet step 1 & 2 speed in half timestep and position in full timestep
        for part in range(len(universe)):
            for dim in range(dimensions):
                speedList[part][dim] += forceList[part][dim] * timeStep / 2
            forceList[part] = [0, 0, 0]
            pacmanEffectCOORD(part, universe[part])

        # STEP PROCEDURE 2: Look in each box and for each particle check the interactions with others in that box
        for p1 in range(particlesNumber):
            for p2 in range(p1 + 1, particlesNumber):
                distance, rX, rY, rZ = shortestDistance(universe[p1], universe[p2], boxSize)
                if distance < cutOff:
                    lennardJones(distance, p1, p2, rX, rY, rZ)

        # STEP PROCEDURE 3: Speed update and write file
        if step % 10 == 0:
            file.write("%s \n\n" % (particlesNumber + 8))  # First line of xyz file
            vertexGenerator()

        for part in range(len(universe)):
            for dim in range(dimensions):
                speedList[part][dim] += forceList[part][dim] * timeStep / 2
            if step % 10 == 0:
                file.write("O       {}      {}      {}\n".format(universe[part][0], universe[part][1], universe[part][2]))

        # POST SIMULATION: building the time chart
        for step in range(len(timeStop)):
            t = round(timeStop[step] - timeStart, 7)
            fileTime.write("{}      {}\n".format(step + 1, t))


def vertexGenerator():
    # Draws the 8 vertices of the cube
    file.write("Cl       {}      {}      {}\n".format(sqSideLength / 2, sqSideLength / 2, sqSideLength / 2))
    file.write("Cl       {}      {}      {}\n".format(sqSideLength / 2, sqSideLength / 2, - sqSideLength / 2))
    file.write("Cl       {}      {}      {}\n".format(sqSideLength / 2, - sqSideLength / 2, sqSideLength / 2))
    file.write("Cl       {}      {}      {}\n".format(sqSideLength / 2, - sqSideLength / 2, - sqSideLength / 2))
    file.write("Cl       {}      {}      {}\n".format(- sqSideLength / 2, sqSideLength / 2, sqSideLength / 2))
    file.write("Cl       {}      {}      {}\n".format(- sqSideLength / 2, sqSideLength / 2, - sqSideLength / 2))
    file.write("Cl       {}      {}      {}\n".format(- sqSideLength / 2, - sqSideLength / 2, sqSideLength / 2))
    file.write("Cl       {}      {}      {}\n".format(- sqSideLength / 2, - sqSideLength / 2, - sqSideLength / 2))

def particleDisposition():
    for particle in range(particlesNumber):  # This will generate x and y coordinates for each and also speed vectors
        particleCoord = []
        particleSpeed = []
        particleForce = []
        for dim in range(dimensions):
            particleCoord.append(random.uniform(- sqSideLength / 2, sqSideLength / 2))
            particleSpeed.append(random.uniform(-maxStartingSpeed, maxStartingSpeed))
            particleForce.append(0)
        universe.append(particleCoord)
        speedList.append(particleSpeed)
        forceList.append(particleForce)
        file.write(
            "O       {}      {}      {}\n".format(universe[particle][0], universe[particle][1], universe[particle][2]))


def specialParticleDisposition(minDist, particlesNumber, boxSize):  # Particles are always far enough

    maxAttempt = 10
    particleCoord = []
    particleSpeed = []
    particleForce = []
    for dim in range(dimensions):
        particleCoord.append(random.uniform(- sqSideLength / 2, sqSideLength / 2))
        particleSpeed.append(random.uniform(-maxStartingSpeed, maxStartingSpeed))
        particleForce.append(0)
    universe.append(particleCoord)
    speedList.append(particleSpeed)
    forceList.append(particleForce)
    file.write("O       {}      {}      {}\n".format(universe[0][0], universe[0][1], universe[0][2]))

    while len(universe) < particlesNumber:  # This will generate x and y coordinates for each and also speed vectors
        if maxAttempt == 0:
            break
        particleCoord = []
        for dim in range(dimensions):
            particleCoord.append(random.uniform(- sqSideLength / 2, sqSideLength / 2))
        universe.append(particleCoord)

        print(len(universe) - 1)
        for part in range(0, len(universe) - 1):
            if shortestDistance(particleCoord, universe[part], boxSize)[0] < minDist and maxAttempt != 0:
                maxAttempt -= 1
                del universe[-1]
                break
            elif shortestDistance(particleCoord, universe[part], boxSize)[0] >= minDist and maxAttempt != 0:
                maxAttempt = 10
            elif maxAttempt == 0:
                del universe[-1]
                break
        if maxAttempt == 10:
            particleSpeed = []
            particleForce = []
            for dim in range(dimensions):
                particleSpeed.append(random.uniform(-maxStartingSpeed, maxStartingSpeed))
                particleForce.append(0)
            speedList.append(particleSpeed)
            forceList.append(particleForce)
            file.write("O       {}      {}      {}\n".format(universe[-1][0], universe[-1][1], universe[-1][2]))
    particlesNumber = len(universe)
    print(len(universe))
    print(len(speedList))


def particleDispositionTEST():
    global particlesNumber
    particlesNumber = 2
    universe.append([-5, 0, 0])
    universe.append([-6.4, 0, 0])
    speedList.append([0, 0, 0])
    speedList.append([0, 0, 0])
    forceList.append([0, 0, 0])
    forceList.append([0, 0, 0])
    file.write("O       {}      {}      {}\n".format(universe[0][0], universe[0][1], universe[0][2]))
    file.write("O       {}      {}      {}\n".format(universe[1][0], universe[1][1], universe[1][2]))

def shortestDistance(p1, p2, boxSize):  # Defines which is the shortest distance for the particles

    distanceX = p1[0] - p2[0]
    distanceY = p1[1] - p2[1]
    distanceZ = p1[2] - p2[2]

    distance = math.sqrt(distanceX ** 2 + distanceY ** 2 + distanceZ ** 2)

    if distance > 2 * math.sqrt(3 * boxSize ** 2):
        if (p1[0] < 0 and p2[0] > 0) or (p1[0] > 0 and p2[0] < 0):
            distanceX = sqSideLength - abs(p1[0] - p2[0])
        else:
            distanceX = p1[0] - p2[0]

        if (p1[1] < 0 and p2[1] > 0) or (p1[1] > 0 and p2[1] < 0):
            distanceY = sqSideLength - abs(p1[1] - p2[1])
        else:
            distanceY = p1[1] - p2[1]

        if (p1[2] < 0 and p2[2] > 0) or (p1[2] > 0 and p2[2] < 0):
            distanceZ = sqSideLength - abs(p1[2] - p2[2])
        else:
            distanceZ = p1[2] - p2[2]
        distance = math.sqrt(distanceX ** 2 + distanceY ** 2 + distanceZ ** 2)

    if distance == 0:
        ratioXtD = ratioYtD = ratioZtD = 0
    else:
        ratioXtD = abs(distanceX) / distance
        ratioYtD = abs(distanceY) / distance
        ratioZtD = abs(distanceZ) / distance

    return distance, ratioXtD, ratioYtD, ratioZtD

def shortestDistance(p1, p2):

    relp2 = [] #List of all the possible distances between p1 and p2
    relDeltaX = [abs(p1[0] - p2[0])] #Parameter needed for the calculation of angle between p1 and p2
    if p1[0] >= 0 and p1[1] >= 0: #p1 in first quadrant
        relp2.append(math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)) #p1-p2 distance in normal case
        relp2.append(math.sqrt((p1[0] - (p2[0] + sqSideLength)) ** 2 + (p1[1] - p2[1]) ** 2)) #p1-p2 distance with the p2 of the square above
        relp2.append(math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - (p2[1] + sqSideLength)) ** 2)) #p1-p2 distance with p2 of the right square
        relp2.append(math.sqrt((p1[0] - (p2[0] + sqSideLength)) ** 2 + (p1[1] - (p2[1] + sqSideLength)) ** 2)) #p1-p2 distance with p2 of the rigth-top square
        relDeltaX.append(abs(p1[0] - (p2[0] + sqSideLength))) #append the other possible
    elif p1[0] < 0 and p1[1] >= 0: #p1 in second quadrant
        relp2.append(math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2))
        relp2.append(math.sqrt((p1[0] - (p2[0] - sqSideLength)) ** 2 + (p1[1] - p2[1]) ** 2))
        relp2.append(math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - (p2[1] + sqSideLength)) ** 2))
        relp2.append(math.sqrt((p1[0] - (p2[0] - sqSideLength)) ** 2 + (p1[1] - (p2[1] + sqSideLength)) ** 2))
        relDeltaX.append(abs(p1[0] - (p2[0] - sqSideLength)))
    elif p1[0] < 0 and p1[1] < 0: #p1 in third quadrant
        relp2.append(math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2))
        relp2.append(math.sqrt((p1[0] - (p2[0] - sqSideLength)) ** 2 + (p1[1] - p2[1]) ** 2))
        relp2.append(math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - (p2[1] - sqSideLength)) ** 2))
        relp2.append(math.sqrt((p1[0] - (p2[0] - sqSideLength)) ** 2 + (p1[1] - (p2[1] - sqSideLength)) ** 2))
        relDeltaX.append(abs(p1[0] - (p2[0] - sqSideLength)))
    elif p1[0] >= 0 and p1[1] < 0: #p1 in fourth quadrant
        relp2.append(math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2))
        relp2.append(math.sqrt((p1[0] - (p2[0] + sqSideLength)) ** 2 + (p1[1] - p2[1]) ** 2))
        relp2.append(math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - (p2[1] - sqSideLength)) ** 2))
        relp2.append(math.sqrt((p1[0] - (p2[0] + sqSideLength)) ** 2 + (p1[1] - (p2[1] - sqSideLength)) ** 2))
        relDeltaX.append(abs(p1[0] - (p2[0] + sqSideLength)))
    shortest = min(relp2)  #Select the lowest distance
    realDeltaX = min(relDeltaX) #same here
    return shortest, realDeltaX



def pacmanEffectCOORD(p1, p1Coor):
    for dim in range(len(p1Coor)):
        p1Coor[dim] += speedList[p1][dim] * timeStep
        if p1Coor[dim] >= sqSideLength / 2:
            mult = int((p1Coor[dim] + (sqSideLength / 2)) / sqSideLength)
            p1Coor[dim] -= sqSideLength * mult
        elif p1Coor[dim] <= - sqSideLength / 2:
            mult = int((p1Coor[dim] - (sqSideLength / 2)) / sqSideLength)
            p1Coor[dim] -= sqSideLength * mult

def TESTPrint(p1, p2, Ftot, distance):
    print(p1, p2)
    print("Total LJ Force =", Ftot)
    print("Distance       =", distance)
    print("P1:", universe[p1], " P2:", universe[p2])
    print("P1 Speed x & y =", speedList[p1][0], " ", speedList[p1][1])
    print("P2 Speed x & y =", speedList[p2][0], " ", speedList[p2][1])

def lennardJones(distance, p1, p2, rX, rY, rZ):
    if distance == 0:
        Ftot = 0
    else:
        Ftot = - 24 * epsilon * (sigma ** 6) / (distance ** 7) + 48 * epsilon * (sigma ** 12) / (distance ** 13)
    if Ftot >= 100:
        TESTPrint(p1, p2, Ftot, distance)
    forceXYZ = [Ftot * rX, Ftot * rY, Ftot * rZ]

    for dim in range(dimensions):
        if universe[p1][dim] < universe[p2][dim]:
            forceList[p1][dim] += - forceXYZ[dim]
            forceList[p2][dim] += + forceXYZ[dim]
        else:
            forceList[p1][dim] += + forceXYZ[dim]
            forceList[p2][dim] += - forceXYZ[dim]


if __name__ == '__main__':
    main()
